---
version: '3.7'

services:
  traefik:
    image: traefik
    command:
      - "--entrypoints=Name:http Address::80 Redirect.EntryPoint:https"
      - "--entrypoints=Name:https Address::443 TLS"
      - "--defaultentrypoints=http,https"
      - "--acme"
      - "--acme.storage=/acme.json"
      - "--acme.entryPoint=https"
      - "--acme.httpChallenge.entryPoint=http"
      - "--acme.onHostRule=true"
      - "--acme.onDemand=false"
      - "--acme.email=${ACME_EMAIL}"
      - "--docker"
      - "--docker.swarmMode"
      - "--docker.domain=${DOMAINNAME}"
      - "--docker.domain=${DOMAINNAME2}"
      - "--docker.watch"
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
        #environment:
        #  - OVH_ENDPOINT=ovh-eu
        #  - OVH_APPLICATION_KEY=${OVH_APPLICATION_KEY}
        #  - OVH_APPLICATION_SECRET=${OVH_APPLICATION_SECRET}
        #  - OVH_CONSUMER_KEY=${OVH_CONSUMER_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
      - ${USERDIR}/docker-config/dizolo/acme/acme.json:/acme.json
    networks:
      - traefik_network
    deploy:
      restart_policy:
        condition: on-failure
        #delay: 5s
        #max_attempts: 5
        #window: 120s
      labels:
        - "traefik.enable=true"
        - "traefik.port=80"
        - "traefik.docker.network=traefik_network"

  nginx-home:
    image: nginx
    volumes:
      - ${USERDIR}/nginx-home:/usr/share/nginx/html:ro
    networks:
      - traefik_network 
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      labels:
        - "traefik.enable=true"
        - "traefik.port=80"
        - "traefik.docker.network=traefik_network"
        - "traefik.frontend.rule=Host:${DOMAINNAME}"

  nginx-start:
    image: nginx
    volumes:
      - ${USERDIR}/nginx-start:/usr/share/nginx/html:ro
    networks:
      - traefik_network 
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 2 
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      labels:
        - "traefik.enable=true"
        - "traefik.port=80"
        - "traefik.docker.network=traefik_network"
        - "traefik.frontend.rule=Host:start.${DOMAINNAME}"

  nginx-dejavu:
    image: nginx
    volumes:
      - ${USERDIR}/nginx-dejavu:/usr/share/nginx/html:ro
    networks:
      - traefik_network 
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 2 
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      labels:
        - "traefik.enable=true"
        - "traefik.port=80"
        - "traefik.docker.network=traefik_network"
        - "traefik.frontend.rule=Host:${DOMAINNAME2}"

          #  ghost-dejavu:
          #    image: ghost
          #    volumes:
          #      - ${USERDIR}/ghost-dejavu:/var/lib/ghost/content
          #    environment:
          #      - url=https://deja-vu.world/wow
          #    networks:
          #      - traefik_network 
          #    deploy:
          #      restart_policy:
          #        condition: on-failure
          #        delay: 5s
          #        max_attempts: 3
          #        window: 120s
          #        #replicas: 2 
          #        #update_config:
          #        #  parallelism: 2
          #        #  delay: 10s
          #        #  order: stop-first
          #      labels:
          #        - "traefik.enable=true"
          #        - "traefik.port=2368"
          #        - "traefik.docker.network=traefik_network"
          #          #- "traefik.frontend.rule=Host:${DOMAINNAME2}"
          #        - "traefik.frontend.rule=Host:${DOMAINNAME2};PathPrefix: /wow"

  jellyfin:
    image: jellyfin/jellyfin
    volumes:
      - ${USERDIR}/jellyfin:/config
      - /mnt/videos/Films:/movies
      - /mnt/storage/TVShows:/tvshows
      - /mnt/storage/Animes:/tvanime
      - /mnt/audio:/audio
      - /mnt/videos/Emissions:/emissions
    environment:
      - UID=${PUID}
      - GID=${PGID}
      - TZ=Europe/Paris
    networks:
      - traefik_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      labels:
        - "traefik.enable=true"
        - "traefik.port=8096"
        - "traefik.docker.network=traefik_network"
        - "traefik.frontend.rule=Host:media.${DOMAINNAME}"

  calibre-web:
    image: linuxserver/calibre-web
    volumes:
      - ${USERDIR}/calibre-web:/config
      - /home/.data/documents/bouquins:/books
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Europe/Paris
    networks:
      - traefik_network 
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 2 
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      labels:
        - "traefik.enable=true"
        - "traefik.port=8083"
        - "traefik.docker.network=traefik_network"
        - "traefik.frontend.rule=Host:books.${DOMAINNAME}"

  freshrss:
    image: linuxserver/freshrss
    volumes:
      - ${USERDIR}/freshrss:/config
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Europe/Paris
    networks:
      - traefik_network 
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      labels:
        - "traefik.enable=true"
        - "traefik.port=80"
        - "traefik.docker.network=traefik_network"
        - "traefik.frontend.rule=Host:feeds.${DOMAINNAME}"
 
  rssbridge:
    image: rssbridge/rss-bridge
    volumes:
      - ${USERDIR}/rss-bridge/whitelist.txt:/app/public/whitelist.txt
    environment:
      - APACHE_SERVER_NAME=bridge.${DOMAINNAME}
      - TZ=Europe/Paris
    networks:
      - traefik_network 
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      labels:
        - "traefik.enable=true"
        - "traefik.port=80"
        - "traefik.docker.network=traefik_network"
        - "traefik.frontend.rule=Host:bridge.${DOMAINNAME}"
 
          #  wikijs:
          #    image: requarks/wiki:latest
          #    volumes:
          #      - ${USERDIR}/wikijs/config.yml:/var/wiki/config.yml
          #    environment:
          #      - WIKI_ADMIN_EMAIL= support@dizolo.eu
          #      - TZ=Europe/Paris
          #    networks:
          #      - traefik_network 
          #    depends_on:
          #      - wikidb
          #    deploy:
          #      restart_policy:
          #        condition: on-failure
          #        delay: 5s
          #        max_attempts: 3
          #        window: 120s
          #      labels:
          #        - "traefik.enable=true"
          #        - "traefik.port=80"
          #        - "traefik.docker.network=traefik_network"
          #        - "traefik.frontend.rule=Host:wiki.${DOMAINNAME}"
          #  wikidb:
          #    image: mongo
          #    volumes:
          #      - ${USERDIR}/wikijs/mongo:/data/db
          #    environment:
          #      - 'MONGO_LOG_DIR=/dev/null'
          #    networks:
          #      - traefik_network 
          #    command: '--smallfiles --bind_ip wikidb'
          #    deploy:
          #      restart_policy:
          #        condition: on-failure
          #        delay: 5s
          #        max_attempts: 3
          #        window: 120s
          #      labels:
          #        - "traefik.enable=true"
          #        - "traefik.port=27017"
          #        - "traefik.docker.network=traefik_network"
 
networks:
  traefik_network:
      external: true # docker network create --driver=overlay --attachable traefik_network
